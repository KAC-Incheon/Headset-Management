# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'headset6.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# from asyncio.windows_events import NULL
# from hashlib import new
# from operator import truediv
# from pickle import FALSE, TRUE
# from re import sub

###디자인 수정 중

import sys  # 모듈 불러오기
import os
import datetime
# from tkinter import Button
# from xmlrpc.client import boolean

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QDialog, QMessageBox, QComboBox, QFileDialog
from PyQt5 import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

import pymysql
import openpyxl

from openpyxl import load_workbook

conn, cur = None, None  # sql 연결 커서


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1036, 894)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(40, 10, 951, 311))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.tableWidget = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout.addWidget(self.tableWidget)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.tableWidget.setFont(font)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(40, 340, 381, 280))

        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(130, 50, 201, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")

        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox)
        self.textBrowser.setGeometry(QtCore.QRect(200, 50, 50, 30))
        self.textBrowser.setObjectName("textBrowser")

        self.textBrowser_2 = QtWidgets.QTextBrowser(self.groupBox)
        self.textBrowser_2.setGeometry(QtCore.QRect(200, 116, 50, 30))
        self.textBrowser_2.setObjectName("textBrowser_2")

        self.textBrowser_3 = QtWidgets.QTextBrowser(self.groupBox)
        self.textBrowser_3.setGeometry(QtCore.QRect(200, 180, 50, 30))
        self.textBrowser_3.setObjectName("textBrowser_3")

        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(116, 110, 211, 41))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(140, 180, 131, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")

        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(450, 330, 430, 530))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.textBrowser_6 = QtWidgets.QTextBrowser(self.groupBox_2)
        self.textBrowser_6.setGeometry(QtCore.QRect(680, 79, 121, 31))
        self.textBrowser_6.setObjectName("textBrowser_6")
        self.textEdit = QtWidgets.QTextEdit(self.groupBox_2)
        self.textEdit.setGeometry(QtCore.QRect(220, 180, 100, 30))
        self.textEdit.setObjectName("textEdit")
        self.label_6 = QtWidgets.QLabel(self.groupBox_2)
        self.label_6.setGeometry(QtCore.QRect(84, 180, 71, 31))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(100, 40, 71, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox.setGeometry(QtCore.QRect(220, 40, 100, 30))
        self.comboBox.setObjectName("comboBox")
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_2.setGeometry(QtCore.QRect(220, 110, 100, 30))
        self.comboBox_2.setObjectName("comboBox")
        self.label_8 = QtWidgets.QLabel(self.groupBox_2)
        self.label_8.setGeometry(QtCore.QRect(100, 320, 71, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.groupBox_2)
        self.label_9.setGeometry(QtCore.QRect(84, 110, 81, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.groupBox_2)
        self.label_10.setGeometry(QtCore.QRect(114, 250, 81, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.groupBox_2)
        self.label_11.setGeometry(QtCore.QRect(100, 390, 71, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        # self.textEdit_3 = QtWidgets.QTextEdit(self.groupBox_2)
        # self.textEdit_3.setGeometry(QtCore.QRect(220, 40, 151, 41))
        # self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_4 = QtWidgets.QTextEdit(self.groupBox_2)
        self.textEdit_4.setGeometry(QtCore.QRect(220, 320, 100, 30))
        self.textEdit_4.setObjectName("textEdit_4")
        # self.textEdit_5 = QtWidgets.QTextEdit(self.groupBox_2)
        # self.textEdit_5.setGeometry(QtCore.QRect(220, 110, 151, 41))
        # self.textEdit_5.setObjectName("textEdit_5")
        self.textEdit_6 = QtWidgets.QTextEdit(self.groupBox_2)
        self.textEdit_6.setGeometry(QtCore.QRect(220, 250, 100, 30))
        self.textEdit_6.setObjectName("textEdit_6")
        self.textEdit_7 = QtWidgets.QTextEdit(self.groupBox_2)
        self.textEdit_7.setGeometry(QtCore.QRect(220, 390, 100, 30))
        self.textEdit_7.setObjectName("textEdit_7")
        self.pushButton = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton.setGeometry(QtCore.QRect(295, 460, 101, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(910, 370, 101, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(910, 430, 101, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(910, 490, 101, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(910, 790, 101, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        font.setPointSize(8)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1036, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(MainWindow.showlist)  # type: ignore 함수연결
        self.pushButton_3.clicked.connect(MainWindow.delete)
        self.pushButton_2.clicked.connect(self.dialog_open)  # 수정창 띄우기
        self.pushButton_4.clicked.connect(MainWindow.register_open)  # 등록창 띄우기
        self.pushButton_5.clicked.connect(self.export)  # 엑셀만들기
        # 검색버튼
        self.pushButton.setStyleSheet("QPushButton"
                                      "{"
                                      "border-style:solid;"
                                      "border-width: 2px;"
                                      "border-color: #9DCFFF;"
                                      "border-radius: 3px;"
                                      "}""QPushButton::hover"
                                      "{"
                                      "border-style:solid;"
                                      "border-width: 1px;"
                                      "color:white;"
                                      "background-color: #9DCFFF;"
                                      "border-radius: 3px;"
                                      "}"
                                      )
        # 수정버튼
        self.pushButton_2.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )
        # 삭제버튼
        self.pushButton_3.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )
        # 등록버튼
        self.pushButton_4.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )
        self.pushButton_5.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )

        self.tableWidget.verticalHeader().sectionClicked.connect(self.row_click)  # 행 헤더 클릭

        # 행 번호 말고 다른곳 클릭하면 선택한 값 위치 리셋
        self.tableWidget.cellClicked.connect(self.cellclicked_event)
        self.tableWidget.horizontalHeader().sectionClicked.connect(self.headerclicked_event)
        self.tableWidget.setCornerButtonEnabled(False)  # 왼쪽 상단 코너버튼 클릭 끄기
        self.tableWidget.verticalHeader().setFixedWidth(46)  ##열 헤더 너비 고정

        self.tableWidget.setStyleSheet("border-style:solid;"
                                       "border-width: 2px;"
                                       "border-color: #9DCFFF;"
                                       "border-radius: 3p")

        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)  ###테이블 안에서 수정 금지
        # self.tableWidget.setSelectionMode(QAbstractItemView.NoSelection)   ###데이터 선택 금지

        self.tableWidget.setSortingEnabled(True)  # 열 정렬

        # self.tableWidget.setStyleSheet("background-color:  #9DCFFF;")

        ##### 지급수량 세기
        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')

        cur = conn.cursor()  # 커서 연결하기
        text = '지급'
        cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('{}');".format(text))  # sql문 입력
        row = cur.fetchone()
        self.textBrowser.setText(str(row[0]))  ##### 개수 표출

        ##### 미지급수량 세기 
        cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('반납','none');")  # sql문 입력
        row = cur.fetchone()
        self.textBrowser_2.setText(str(row[0]))  ##### 개수 표출

        ##### 총수량 세기 
        cur.execute("select * from v_new")  # sql문 입력
        rowcount = cur.fetchall()
        self.textBrowser_3.setText(str(len(rowcount)))  ##### 개수 표출

        ###콤보박스 리스트 추가
        self.comboBox.addItem('')

        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()

        sql = "SELECT DISTINCT model_name FROM v_now WHERE NOT model_name = 'none' ORDER BY model_name DESC ;"
        cur.execute(sql)

        while True:
            sqlrow = cur.fetchone()
            if sqlrow == None:
                break
            self.comboBox.addItem(str(sqlrow[0]))
        self.comboBox.addItem('none')
        self.comboBox.currentIndexChanged.connect(self.combo_change)

        ####지급여부 콤보박스2 리스트 설정   
        self.comboBox_2.addItem('')
        sql = "SELECT DISTINCT state FROM v_now ORDER BY state DESC; "
        cur.execute(sql)
        while True:
            sqlrow = cur.fetchone()
            if sqlrow == None:
                break
            self.comboBox_2.addItem(str(sqlrow[0]))

        self.comboBox_2.currentIndexChanged.connect(self.combo2_change)  ###콤보박스 선택 시 함수

    def combo_change(self):  ###모델명

        combo = self.comboBox.currentText()
        return combo

    def combo2_change(self):  ###### 지급or반납
        a = self.comboBox_2.currentText()

        return a

    def register_open(self):  # 등록 창 오픈

        self.close()  ###메인윈도우 닫음

        self.register = Ui_Resigster()  ## 수정창 클래스 생성
        # except :  QMessageBox.warning(self,'알림','수정할 데이터를 선택하세요')

        self.register.exec()  ###창 지속
        self.show()  ###  창 닫으면 메인윈도우 다시 표출

        ########################    등록 후 다시 검색 ####################################
        ##### 지급수량 세기
        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()  # 커서 연결하기
        text = '지급'
        cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('{}');".format(text))  # sql문 입력
        row = cur.fetchone()
        self.textBrowser.setText(str(row[0]))  ##### 개수 표출
        ##### 미지급수량 세기 
        cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('반납','none');")  # sql문 입력
        row = cur.fetchone()
        self.textBrowser_2.setText(str(row[0]))  ##### 개수 표출
        ##### 총수량 세기 
        cur.execute("select * from v_new")  # sql문 입력
        rowcount = cur.fetchall()
        self.textBrowser_3.setText(str(len(rowcount)))  ##### 개수 표출

        # self.tableWidget.setStyleSheet("border-style:solid;"
        #                               "border-width: 0.4px;"         
        #                               "border-color: #9DCFFF;"
        #                               "border-radius: 3p")       

        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()

        self.tableWidget.clear()
        text_serial = self.textEdit.toPlainText()  # 사용자 일련번호 입력값 받아오기
        text_model = self.combo_change()  # 모델명
        text_recieve = self.textEdit_4.toPlainText()  # 인수자
        text_state = self.combo2_change()  # 지급여부
        text_date = self.textEdit_6.toPlainText()
        text_return = self.textEdit_7.toPlainText()
        text_list = [text_serial.strip(), text_model.strip(), text_recieve.strip(), text_state.strip(),
                     text_date.strip(), text_return.strip()]  # strip함수 : 공백->0 리턴

        if not any(text_list):  ########## 모든 칸에 입력 없을 경우 전체 헤드셋 표출

            cur.execute("select * from v_new")  # sql문 실행
            allrows = cur.fetchall()
            self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
            self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
            self.tableWidget.setHorizontalHeaderLabels(
                ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 위젯 헤드이름
            # 등재된 전체 헤드셋 정보 표출
            cur.execute("select * from v_new")
            row = 0
            while True:
                sqlrow = cur.fetchone()

                if sqlrow == None:
                    break
                for col in range(0, 11):  # 0부터 9번째 열
                    self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                    if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                        self.tableWidget.setItem(row, col, QTableWidgetItem(""))

                row += 1
            self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김

        else:  ############# 입력값 하나라도 있을 경우 조건 검색

            self.tableWidget.clear()  # 테이블 위젯 초기화
            ####입력이 공백일 경우 해당 조건 패스 
            if not text_serial.strip():
                text_serial = 'serial_num'
            else:
                text_serial = ("'{}'".format(text_serial))
            if not text_model.strip():
                text_model = 'model_name'
            else:
                text_model = ("'{}'".format(text_model))
            if not text_recieve.strip():
                text_recieve = 'recieve_person'
            else:
                text_recieve = ("'{}'".format(text_recieve))
            if not text_state.strip():
                text_state = 'state'
            else:
                text_state = ("'{}'".format(text_state))
            if not text_date.strip():
                text_date = 'state_date'
            else:
                try:
                    print(datetime.datetime.strptime(text_date, "%Y-%m-%d"))
                    text_date = ("'{}'".format(text_date))
                except ValueError:
                    QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')
                    text_date = 'state_date'
            if not text_return.strip():
                text_return = 'return_person'
            else:
                text_return = ("'{}'".format(text_return))

            sql = "SELECT * FROM v_new WHERE serial_num = {} AND model_name = {}\
                   AND recieve_person = {} AND state = {}\
                   AND state_date = {} AND return_person = {}\
                   ORDER BY state_date DESC".format(text_serial, text_model, text_recieve, text_state, text_date,
                                                    text_return)
            cur.execute(sql)
            ####테이블 행열 지정
            allrows = cur.fetchall()
            self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
            self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
            self.tableWidget.setHorizontalHeaderLabels(
                ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이름
            ####검색 데이터 표출
            cur.execute(sql)
            row = 0
            while True:
                sqlrow = cur.fetchone()
                if sqlrow == None:
                    break
                for col in range(0, 11):  # 0~9열 출력
                    self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                    if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                        self.tableWidget.setItem(row, col, QTableWidgetItem(""))
                row += 1
            self.tableWidget.setColumnHidden(11, True)  ####마지막 기록 순번 열 숨김

    def dialog_open(self):  # 수정 창 오픈

        print("수정클릭")
        try:

            standard = [selected_data[0].strip(), selected_data[1].strip(), selected_data[2].strip(),
                        selected_data[3].strip(), selected_data[4].strip(), selected_data[5].strip(),
                        selected_data[6].strip(), selected_data[7].strip(), selected_data[8].strip(),
                        selected_data[9].strip(), selected_data[10].strip()]

            ####초기 선택값 있는 경우 실행, selected_data는 수정창 테이블 한 번 표출 후 공백으로 초기화
            if any(standard):

                self.dialog = Ui_Update()  ## 수정창 클래스 생성

                self.close()  ###메인윈도우 닫음

                self.dialog.exec()  ###수정창 지속
                self.show()  ### 수정창 닫으면 메인윈도우 다시 표출

                ########################    수정 창 닫은 후 메인창 다시 검색 ####################################
                # self.tableWidget.setStyleSheet("border-style:solid;"
                #                               "border-width: 2px;"
                #                               "border-color: #9DCFFF;"
                #                               "border-radius: 3p")
                ##### 지급수량 세기
                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()  # 커서 연결하기
                text = '지급'
                cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('{}');".format(text))  # sql문 입력
                row = cur.fetchone()
                self.textBrowser.setText(str(row[0]))  ##### 개수 표출
                ##### 미지급수량 세기
                cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('반납','none');")  # sql문 입력
                row = cur.fetchone()
                self.textBrowser_2.setText(str(row[0]))  ##### 개수 표출
                ##### 총수량 세기
                cur.execute("select * from v_new")  # sql문 입력
                rowcount = cur.fetchall()
                self.textBrowser_3.setText(str(len(rowcount)))  ##### 개수 표출

                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()

                self.tableWidget.clear()
                text_serial = self.textEdit.toPlainText()  # 사용자 일련번호 입력값 받아오기
                text_model = self.combo_change()  # 모델명
                text_recieve = self.textEdit_4.toPlainText()  # 인수자
                text_state = self.combo2_change()  # 지급여부
                text_date = self.textEdit_6.toPlainText()
                text_return = self.textEdit_7.toPlainText()
                text_list = [text_serial.strip(), text_model.strip(), text_recieve.strip(), text_state.strip(),
                             text_date.strip(), text_return.strip()]  # strip함수 : 공백->0 리턴

                if not any(text_list):  ########## 모든 칸에 입력 없을 경우 전체 헤드셋 표출

                    cur.execute("select * from v_new")  # sql문 실행
                    allrows = cur.fetchall()
                    self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
                    self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
                    self.tableWidget.setHorizontalHeaderLabels(
                        ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 위젯 헤드이름
                    # 등재된 전체 헤드셋 정보 표출
                    cur.execute("select * from v_new")
                    row = 0
                    while True:
                        sqlrow = cur.fetchone()

                        if sqlrow == None:
                            break
                        for col in range(0, 11):  # 0부터 9번째 열

                            self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                            if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                                self.tableWidget.setItem(row, col, QTableWidgetItem(""))

                        row += 1
                    self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김


                else:  ############# 입력값 하나라도 있을 경우 조건 검색

                    self.tableWidget.clear()  # 테이블 위젯 초기화
                    ####입력이 공백일 경우 해당 조건 패스
                    if not text_serial.strip():
                        text_serial = 'serial_num'
                    else:
                        text_serial = ("'{}'".format(text_serial))
                    if not text_model.strip():
                        text_model = 'model_name'
                    else:
                        text_model = ("'{}'".format(text_model))
                    if not text_recieve.strip():
                        text_recieve = 'recieve_person'
                    else:
                        text_recieve = ("'{}'".format(text_recieve))
                    if not text_state.strip():
                        text_state = 'state'
                    else:
                        text_state = ("'{}'".format(text_state))
                    if not text_date.strip():
                        text_date = 'state_date'
                    else:
                        try:
                            print(datetime.datetime.strptime(text_date, "%Y-%m-%d"))
                            text_date = ("'{}'".format(text_date))
                        except ValueError:
                            QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')
                            text_date = 'state_date'
                    if not text_return.strip():
                        text_return = 'return_person'
                    else:
                        text_return = ("'{}'".format(text_return))

                    sql = "SELECT * FROM v_new WHERE serial_num = {} AND model_name = {} \
                   AND recieve_person = {} AND state = {} \
                   AND state_date = {} AND return_person = {} \
                   ORDER BY state_date DESC".format(text_serial, text_model, text_recieve, text_state, text_date,
                                                    text_return)
                    cur.execute(sql)
                    ####테이블 행열 지정
                    allrows = cur.fetchall()
                    self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
                    self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
                    self.tableWidget.setHorizontalHeaderLabels(
                        ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이름
                    ####검색 데이터 표출
                    cur.execute(sql)
                    row = 0
                    while True:
                        sqlrow = cur.fetchone()
                        if sqlrow == None:
                            break
                        for col in range(0, 11):  # 0~9열 출력
                            self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                            if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                                self.tableWidget.setItem(row, col, QTableWidgetItem(""))
                        row += 1
                    self.tableWidget.setColumnHidden(11, True)  ####마지막 기록 순번 열 숨김

            elif not any(standard):  #####selected_data 값 없는 경우

                QMessageBox.warning(self, '경고', '수정할 데이터를 선택하세요.')


        except NameError:  ####selected_data 값 없는 경우
            QMessageBox.warning(self, '경고', '수정할 데이터를 선택하세요.')

    def showlist(self):  #### '검색'버튼 클릭 showlist함수
        # self.tableWidget.setStyleSheet("border-style:solid;"
        #                               "border-width: 2px;"         
        #                               "border-color: #9DCFFF;"
        #                               "border-radius: 3p")       
        ##### 지급수량 세기
        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()  # 커서 연결하기
        text = '지급'
        cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('{}');".format(text))  # sql문 입력
        row = cur.fetchone()
        self.textBrowser.setText(str(row[0]))  ##### 개수 표출
        ##### 미지급수량 세기 
        cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('반납','none');")  # sql문 입력
        row = cur.fetchone()
        self.textBrowser_2.setText(str(row[0]))  ##### 개수 표출
        ##### 총수량 세기 
        cur.execute("select * from v_new")  # sql문 입력
        rowcount = cur.fetchall()
        self.textBrowser_3.setText(str(len(rowcount)))  ##### 개수 표출

        global selected_data
        print("검색버튼 누름")

        # 등재된 전체 헤드셋 정보 표출
        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()

        text_serial = self.textEdit.toPlainText()  # 사용자 일련번호 입력값 받아오기
        text_model = self.combo_change()  # 모델명
        text_recieve = self.textEdit_4.toPlainText()  # 인수자
        text_state = self.combo2_change()  # 지급여부
        text_date = self.textEdit_6.toPlainText()
        text_return = self.textEdit_7.toPlainText()
        text_list = [text_serial.strip(), text_model.strip(), text_recieve.strip(), text_state.strip(),
                     text_date.strip(), text_return.strip()]

        if not any(text_list):  ########## 모든 칸에 입력 없을 경우 전체 헤드셋 표출
            print("모든 조건 입력없음")
            cur.execute("select * from v_new")  # sql문 실행
            allrows = cur.fetchall()
            self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
            self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
            self.tableWidget.setHorizontalHeaderLabels(
                ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 위젯 헤드이름

            # self.tableWidget.horizontalHeader().setStretchLastSection(True)
            # header = self.tableWidget.horizontalHeader()
            # header.resizeSection(0,100)
            # header.resizeSection(1,100)
            # header.resizeSection(2,80)
            # header.resizeSection(5,80)
            # header.resizeSection(7,80)
            # header.resizeSection(8,80)
            # header.resizeSection(9,350)
            # self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)  # 내용에 맞게 열 너비 조정

            cur.execute("select * from v_new")
            row = 0
            while True:
                sqlrow = cur.fetchone()

                if sqlrow == None:
                    break
                for col in range(0, 11):  # 0부터 10번째 열
                    self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                    if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                        self.tableWidget.setItem(row, col, QTableWidgetItem(""))

                row += 1
            self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김

            self.tableWidget.resizeColumnToContents(4)  # 4번째 열 너비 조정
            self.tableWidget.resizeColumnToContents(6)  # 6번째 열 너비 조정
            self.tableWidget.resizeColumnToContents(9)  # 9번째 열 너비 조정

            selected_data = ['', '', '', '', '', '', '', '', '', '', '']
            print("발생:", selected_data)


        else:  ############# 입력값 하나라도 있을 경우

            self.tableWidget.clear()  # 테이블 위젯 초기화
            ####입력이 공백일 경우 해당 조건 패스 
            if not text_serial.strip():
                text_serial = 'serial_num'
            else:
                text_serial = ("'{}'".format(text_serial))
            if not text_model.strip():
                text_model = 'model_name'
            else:
                text_model = ("'{}'".format(text_model))
            if not text_recieve.strip():
                text_recieve = 'recieve_person'
            else:
                text_recieve = ("'{}'".format(text_recieve))
            if not text_state.strip():
                text_state = 'state'
            else:
                text_state = ("'{}'".format(text_state))
            if not text_date.strip():
                text_date = 'state_date'
            else:
                try:
                    print(datetime.datetime.strptime(text_date, "%Y-%m-%d"))
                    text_date = ("'{}'".format(text_date))
                except ValueError:
                    QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')
                    text_date = 'state_date'
            if not text_return.strip():
                text_return = 'return_person'
            else:
                text_return = ("'{}'".format(text_return))

            sql = "SELECT * FROM v_new WHERE serial_num = {} AND model_name = {} \
                   AND recieve_person = {} AND state = {} \
                   AND state_date = {} AND return_person = {} \
                   ORDER BY state_date DESC".format(text_serial, text_model, text_recieve, text_state, text_date,
                                                    text_return)

            print(sql)

            cur.execute(sql)

            ####테이블 행열 지정
            allrows = cur.fetchall()
            self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
            self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
            self.tableWidget.setHorizontalHeaderLabels(
                ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이름
            ####검색 데이터 표출
            cur.execute(sql)

            row = 0
            while True:
                sqlrow = cur.fetchone()
                if sqlrow == None:
                    break
                for col in range(0, 11):  # 0~10열 출력
                    self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                    if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                        self.tableWidget.setItem(row, col, QTableWidgetItem(""))
                row += 1

            self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김

            selected_data = ['', '', '', '', '', '', '', '', '', '', '']
            print("발생:", selected_data)

    def row_click(self, logicalIndex):  ###사용자 행 헤더 클릭시

        global row_index, selected_data

        row_index = logicalIndex + 1

        print(str(row_index) + '번째 행')
        try:
            # 수정창 클래스에 전달
            data1 = self.tableWidget.item(row_index - 1, 0).text()
            data2 = self.tableWidget.item(row_index - 1, 1).text()
            data3 = self.tableWidget.item(row_index - 1, 2).text()
            data4 = self.tableWidget.item(row_index - 1, 3).text()
            data5 = self.tableWidget.item(row_index - 1, 4).text()
            data6 = self.tableWidget.item(row_index - 1, 5).text()
            data7 = self.tableWidget.item(row_index - 1, 6).text()
            data8 = self.tableWidget.item(row_index - 1, 7).text()
            data9 = self.tableWidget.item(row_index - 1, 8).text()
            data10 = self.tableWidget.item(row_index - 1, 9).text()
            data11 = self.tableWidget.item(row_index - 1, 10).text()  # 기록 인덱스 값

            print(data11)
            selected_data = [data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11]

            return row_index, selected_data
        except AttributeError:
            print("AttributeError")

    def cellclicked_event(self, row, col):
        global selected_data, row_index
        selected_data = ['', '', '', '', '', '', '', '', '', '', '']
        print("발생:", selected_data)

    def headerclicked_event(self, logicalIndex):
        global selected_data, row_index
        selected_data = ['', '', '', '', '', '', '', '', '', '', '']
        print("발생:", selected_data)

    def delete(self):  #### '삭제'버튼 클릭 이벤트
        global selected_data
        standard = selected_data[1].strip()
        if standard:  ##일련번호 공백이 아닐경우

            answer = self.Question_event()  ### yes or no
            if answer:

                serial_data = selected_data[1]  ##선택 행 일련번호 값 가져오
                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()
                sql = "UPDATE headset SET valid = 0 WHERE serial_num = '{}';".format(serial_data)
                print(str(sql))

                cur.execute(sql)
                conn.commit()
                QMessageBox.about(self, '알림', '일련번호 : {} 헤드셋이 삭제되었습니다.'.format(serial_data))

                ########################    삭제 후 메인창 다시 검색 ###################################
                ##### 지급수량 세기
                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()  # 커서 연결하기
                text = '지급'
                cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('{}');".format(text))  # sql문 입력
                row = cur.fetchone()
                self.textBrowser.setText(str(row[0]))  ##### 개수 표출
                ##### 미지급수량 세기
                cur.execute("SELECT COUNT(*) from v_new WHERE state IN ('반납','none');")  # sql문 입력
                row = cur.fetchone()
                self.textBrowser_2.setText(str(row[0]))  ##### 개수 표출
                ##### 총수량 세기
                cur.execute("select * from v_new")  # sql문 입력
                rowcount = cur.fetchall()
                self.textBrowser_3.setText(str(len(rowcount)))  ##### 개수 표출

                self.tableWidget.clear()
                text_serial = self.textEdit.toPlainText()  # 사용자 일련번호 입력값 받아오기
                text_model = self.combo_change()  # 모델명
                text_recieve = self.textEdit_4.toPlainText()  # 인수자
                text_state = self.combo2_change()  # 지급여부
                text_date = self.textEdit_6.toPlainText()
                text_return = self.textEdit_7.toPlainText()
                text_list = [text_serial.strip(), text_model.strip(), text_recieve.strip(), text_state.strip(),
                             text_date.strip(), text_return.strip()]

                # self.tableWidget.setStyleSheet("border-style:solid;"
                #                   "border-width: 2px;"
                #                   "border-color: #9DCFFF;"
                #                   "border-radius: 3p")

                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()
                if not any(text_list):  ########## 모든 칸에 입력 없을 경우 전체 헤드셋 표출
                    cur.execute("select * from v_new")  # sql문 실행
                    allrows = cur.fetchall()
                    self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
                    self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
                    self.tableWidget.setHorizontalHeaderLabels(
                        ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 위젯 헤드이름
                    # 등재된 전체 헤드셋 정보 표출
                    cur.execute("select * from v_new")
                    row = 0
                    while True:
                        sqlrow = cur.fetchone()
                        if sqlrow == None:
                            break
                        for col in range(0, 11):  # 0부터 10번째 열
                            self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                            if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                                self.tableWidget.setItem(row, col, QTableWidgetItem(""))
                        row += 1
                    self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김
                else:  ############# 입력값 하나라도 있을 경우 조건 검
                    self.tableWidget.clear()  # 테이블 위젯 초기화
                    ####입력이 공백일 경우 해당 조건 패스
                    if not text_serial.strip():
                        text_serial = 'serial_num'
                    else:
                        text_serial = ("'{}'".format(text_serial))
                    if not text_model.strip():
                        text_model = 'model_name'
                    else:
                        text_model = ("'{}'".format(text_model))
                    if not text_recieve.strip():
                        text_recieve = 'recieve_person'
                    else:
                        text_recieve = ("'{}'".format(text_recieve))
                    if not text_state.strip():
                        text_state = 'state'
                    else:
                        text_state = ("'{}'".format(text_state))
                    if not text_date.strip():
                        text_date = 'state_date'
                    else:
                        try:
                            print(datetime.datetime.strptime(text_date, "%Y-%m-%d"))
                            text_date = ("'{}'".format(text_date))
                        except ValueError:
                            QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')
                            text_date = 'state_date'
                    if not text_return.strip():
                        text_return = 'return_person'
                    else:
                        text_return = ("'{}'".format(text_return))

                    sql = "SELECT * FROM v_new WHERE serial_num = {} AND model_name = {} \
                               AND recieve_person = {} AND state = {} \
                               AND state_date = {} AND return_person = {} \
                               ORDER BY state_date DESC".format(text_serial, text_model, text_recieve, text_state,
                                                                text_date, text_return)
                    cur.execute(sql)
                    ####테이블 행열 지정
                    allrows = cur.fetchall()
                    self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
                    self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
                    self.tableWidget.setHorizontalHeaderLabels(
                        ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이
                    ####검색 데이터 표출
                    cur.execute(sql)
                    row = 0
                    while True:
                        sqlrow = cur.fetchone()
                        if sqlrow == None:
                            break
                        for col in range(0, 11):  # 0~10열 출력
                            self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                            # if str(sqlrow[col]) == "None" :   #일자 null값 공백으로 표출
                            #    self.tableWidget.setItem(row,col,QTableWidgetItem(""))
                        row += 1
                    self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김
            elif not answer:
                pass

        elif not standard:  ####선택값 공백인 경우
            QMessageBox.warning(self, '경고', '삭제할 데이터를 선택하세요.')

        selected_data = ['', '', '', '', '', '', '', '', '', '', '']

    def Question_event(self):

        serial_data = selected_data[1]

        ment = '일련번호 : {} 헤드셋을 삭제하시겠습니까?'.format(selected_data[1])
        buttonReply = QMessageBox.question(self, '알림', ment, QMessageBox.Yes | QMessageBox.No)

        if buttonReply == QMessageBox.Yes:
            print('Yes clicked.')
            return True
        elif buttonReply == QMessageBox.No:
            print('No clicked.')
            return False

    def export(self):

        try:
            filename, filter = QtWidgets.QFileDialog.getSaveFileName(self, 'Save file', 'headset.xlsx',
                                                                     "Excel files(*.xlsx)")
            print(str(filename))

            wb = openpyxl.Workbook()

            sheet = wb.active
            sheet.title = '헤드셋 리스트'

            # 헤더 '모델명','일련번호','상태','일자', '지급내용','인수자','반납내용','반납자','확인자','비고'
            sheet.cell(1, 1, '모델명')
            sheet.cell(1, 2, '일련번호')
            sheet.cell(1, 3, '상태')
            sheet.cell(1, 4, '일자')
            sheet.cell(1, 5, '지급내용')
            sheet.cell(1, 6, '인수자')
            sheet.cell(1, 7, '반납내용')
            sheet.cell(1, 8, '반납자')
            sheet.cell(1, 9, '확인자')
            sheet.cell(1, 10, '비고')

            # sheet.cell(1,1,'s')
            row = 0
            column = 0
            rowcount = self.tableWidget.rowCount()
            columncount = self.tableWidget.columnCount()
            print("행{},열{}".format(str(rowcount), str(columncount)))

            for row in range(0, rowcount):
                for column in range(0, columncount - 1):  ###10열 숨김

                    text = str(self.tableWidget.item(row, column).text())
                    sheet.cell(row + 2, column + 1, text)  ##엑셀 1,1 부터 인덱스 시작
                    column = + 1
                row = +1

            wb.save(filename)
            wb.close()
        except AttributeError:
            QMessageBox.warning(self, '경고', '다운로드할 데이터를 검색하세요')
        except FileNotFoundError:
            print("FileNotFoundError")
            # except Exception as e:
            #    print("Error Writing file.")

    # except Exception as e:
    #    print("Error Saving file.")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "헤드셋 관리 프로그램"))  # 윈도우창 이름
        self.label.setText(_translate("MainWindow", "검색 리스트"))
        self.groupBox.setTitle(_translate("MainWindow", "관리현황"))
        self.label_2.setText(_translate("MainWindow", "지급 수량 "))
        self.label_4.setText(_translate("MainWindow", "미지급 수량 "))
        self.label_5.setText(_translate("MainWindow", "총수량 "))
        self.groupBox_2.setTitle(_translate("MainWindow", "입력"))
        self.label_6.setText(_translate("MainWindow", "일련번호"))
        self.label_7.setText(_translate("MainWindow", "모델명"))
        self.label_8.setText(_translate("MainWindow", "인수자"))
        self.label_9.setText(_translate("MainWindow", "지급여부"))
        self.label_10.setText(_translate("MainWindow", "일자"))
        self.label_11.setText(_translate("MainWindow", "반납자"))
        self.pushButton.setText(_translate("MainWindow", "검색"))
        self.pushButton_2.setText(_translate("MainWindow", "수정"))
        self.pushButton_3.setText(_translate("MainWindow", "삭제"))
        self.pushButton_4.setText(_translate("MainWindow", "신규등록"))
        self.pushButton_5.setText(_translate("MainWindow", "엑셀\n다운로드"))


############################ 수정창 ################################################
class Ui_Update(QDialog):

    def __init__(self):  # 클래스 생성 시  자동 실행되는 함수
        super().__init__()
        self.setupUi(self)
        self.show()

    def setupUi(self, UpdateUi):

        UpdateUi.setWindowModality(Qt.ApplicationModal)  ### 메인창 조작 불가
        self.setWindowFlag(Qt.WindowContextHelpButtonHint, False)  ### QDialog 윈도창에 물음표 제거 

        UpdateUi.setObjectName("UpdateUi")
        UpdateUi.setFixedSize(1220, 440)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        UpdateUi.setFont(font)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(UpdateUi)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(260, 280, 221, 30))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.horizontalLayoutWidget_3)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.horizontalLayout_3.addWidget(self.textBrowser_2)
        self.textEdit_3 = QtWidgets.QTextEdit(self.horizontalLayoutWidget_3)
        self.textEdit_3.setObjectName("textEdit_3")
        self.horizontalLayout_3.addWidget(self.textEdit_3)

        self.textBrowser_3 = QtWidgets.QTextBrowser(UpdateUi)
        self.textBrowser_3.setGeometry(QtCore.QRect(520, 280, 97, 30))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.textEdit_4 = QtWidgets.QTextEdit(UpdateUi)
        self.textEdit_4.setGeometry(QtCore.QRect(630, 280, 200, 30))
        self.textEdit_4.setObjectName("textEdit_4")

        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(UpdateUi)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(260, 360, 221, 30))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.horizontalLayoutWidget_5)
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.horizontalLayout_5.addWidget(self.textBrowser_4)
        self.textEdit_5 = QtWidgets.QTextEdit(self.horizontalLayoutWidget_5)
        self.textEdit_5.setObjectName("textEdit_5")
        self.horizontalLayout_5.addWidget(self.textEdit_5)
        self.horizontalLayoutWidget_6 = QtWidgets.QWidget(UpdateUi)
        self.horizontalLayoutWidget_6.setGeometry(QtCore.QRect(580, 360, 170, 30))
        self.horizontalLayoutWidget_6.setObjectName("horizontalLayoutWidget_6")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_6)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_6)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_6.addWidget(self.label_4)
        self.textEdit_6 = QtWidgets.QTextEdit(self.horizontalLayoutWidget_6)
        self.textEdit_6.setObjectName("textEdit_6")
        self.horizontalLayout_6.addWidget(self.textEdit_6)
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(UpdateUi)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(860, 280, 280, 30))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget_7)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_7.addWidget(self.label_5)
        self.textEdit_7 = QtWidgets.QTextEdit(self.horizontalLayoutWidget_7)
        self.textEdit_7.setObjectName("textEdit_7")
        self.horizontalLayout_7.addWidget(self.textEdit_7)
        self.verticalLayoutWidget = QtWidgets.QWidget(UpdateUi)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(60, 19, 1100, 220))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setTextFormat(QtCore.Qt.RichText)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.tableWidget = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.tableWidget.setFont(font)
        self.verticalLayout.addWidget(self.tableWidget)
        self.label_6 = QtWidgets.QLabel(UpdateUi)
        self.label_6.setGeometry(QtCore.QRect(60, 270, 121, 54))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.comboBox = QtWidgets.QComboBox(UpdateUi)
        self.comboBox.setGeometry(QtCore.QRect(130, 280, 91, 30))
        self.comboBox.setObjectName("comboBox")
        self.label_7 = QtWidgets.QLabel(UpdateUi)
        self.label_7.setGeometry(QtCore.QRect(60, 350, 121, 54))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.comboBox_2 = QtWidgets.QComboBox(UpdateUi)
        self.comboBox_2.setGeometry(QtCore.QRect(130, 360, 91, 30))
        self.comboBox_2.setObjectName("comboBox_2")
        self.pushButton_2 = QtWidgets.QPushButton(UpdateUi)
        self.pushButton_2.setGeometry(QtCore.QRect(826, 360, 101, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(UpdateUi)
        self.pushButton_3.setGeometry(QtCore.QRect(940, 360, 101, 41))
        self.pushButton_4 = QtWidgets.QPushButton(UpdateUi)
        self.pushButton_4.setGeometry(QtCore.QRect(1054, 360, 101, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_3.setFont(font)
        self.pushButton_4.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")

        self.retranslateUi(UpdateUi)
        QtCore.QMetaObject.connectSlotsByName(UpdateUi)

        self.tableWidget.verticalHeader().sectionClicked.connect(self.header_click)  # 헤더 클릭
        self.pushButton_2.clicked.connect(UpdateUi.update)  #####수정 버튼 클릭 함수연결
        self.pushButton_3.clicked.connect(UpdateUi.insert)  #####이력등록 버튼 클릭 함수연결
        self.pushButton_4.clicked.connect(UpdateUi.remove)  #####이력삭제 버튼 클릭 함수연결

        self.pushButton_2.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )

        self.pushButton_3.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )

        self.pushButton_4.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )

        # 선택값 초기화시켜야하는 경우
        self.tableWidget.horizontalHeader().sectionClicked.connect(self.headerclicked_event)
        self.tableWidget.cellClicked.connect(self.cellclicked_event)

        self.tableWidget.setCornerButtonEnabled(False)  # 왼쪽 상단 코너버튼 클릭 끄기

        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)  ###테이블 안에서 수정 금지

        #######메인창에서 선택한 데이터의 일련번호 기준 표출
        global selected_data

        print(selected_data)
        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()

        sql = "SELECT * FROM v_now WHERE serial_num = '{}' ORDER BY state_date DESC".format(selected_data[1])

        ####테이블 행열 지정

        print(sql)

        cur.execute(sql)

        allrows = cur.fetchall()
        self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
        self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
        self.tableWidget.setHorizontalHeaderLabels(
            ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이름

        self.tableWidget.setStyleSheet("border-style:solid;"
                                       "border-width: 1px;"
                                       "border-color: #9DCFFF;"
                                       "border-radius: 3px;")

        ####테이블 데이터 표출
        cur.execute(sql)
        row = 0
        while True:
            sqlrow = cur.fetchone()
            if sqlrow == None:
                break
            for col in range(0, 11):  # 0~10열 출력
                self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                    self.tableWidget.setItem(row, col, QTableWidgetItem(""))
            row += 1
        self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김

        ###콤보박스 리스트 추가
        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()

        sql = "SELECT DISTINCT model_name, IF (model_name = '', '', model_name) AS result \
               FROM headset WHERE NOT model_name = '{}' ORDER BY model_name DESC ;".format(selected_data[0])
        cur.execute(sql)

        self.comboBox.addItem(selected_data[0])  ###메인창에서 선택한 데이터를 콤보박스 첫행에 추가

        ###콤보박스 리스트에 나머지 데이터 추가
        while True:
            sqlrow = cur.fetchone()
            if sqlrow == None:
                break
            self.comboBox.addItem(str(sqlrow[1]))

        self.comboBox.currentIndexChanged.connect(self.combo_change)

        ####지급여부 콤보박스2 리스트 설정
        sql = "SELECT DISTINCT state, IF (state = '', '', state) AS result \
               FROM v_now WHERE NOT state IN ('{}','') ORDER BY state DESC; ".format(selected_data[2])
        cur.execute(sql)

        self.comboBox_2.addItem(selected_data[2])  ###메인창에서 선택한 데이터부터 표출

        ###콤보박스2 리스트에 나머지 데이터 추가
        while True:
            sqlrow = cur.fetchone()
            if sqlrow == None:
                break
            self.comboBox_2.addItem(str(sqlrow[1]))

        a = self.comboBox_2.currentText()  ######지급여부에 따라 나머지 텍스트 세팅

        if a == "지급":
            self.textBrowser_2.setText("{}일자".format(a))
            self.textBrowser_3.setText("{}내용".format(a))
            self.textBrowser_4.setText("인수자")
        elif a == "반납":
            self.textBrowser_2.setText("{}일자".format(a))
            self.textBrowser_3.setText("{}내용".format(a))
            self.textBrowser_4.setText("반납자")
        else:
            self.textBrowser_2.setText("일자")
            self.textBrowser_3.setText("내용")
            self.textBrowser_4.setText("인수자")

        self.comboBox_2.currentIndexChanged.connect(self.combo2_change)  ###콤보박스 선택 시 함수

        global send_data, sub_data
        send_data = selected_data[1]  ####일련번호 이력등록 버튼에 전달
        selected_data = ['', '', '', '', '', '', '', '', '', '', '']  ###사용한 값 초기화, 메인창에서 선택한 행 리셋
        sub_data = ['', '', '', '', '', '', '', '', '', '', '']  ### 수정창에서 선택한 행 리셋
        print("메인창 선택값 초기화를 완료,{}".format(sub_data))

        # self.tableWidget.resizeColumnToContents(0)  #0번째 열 너비 조정
        # self.tableWidget.resizeColumnToContents(4)  #4번째 열 너비 조정
        # self.tableWidget.resizeColumnToContents(6)  #6번째 열 너비 조정
        # self.tableWidget.resizeColumnToContents(9)  #9번째 열 너비 조정
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setFixedWidth(40)  ##열 헤더 너비 고정

    def cellclicked_event(self, row, col):
        global sub_data
        sub_data = ['', '', '', '', '', '', '', '', '', '', '']
        print("발생:", sub_data)

    def headerclicked_event(self, logicalIndex):
        global sub_data
        sub_data = ['', '', '', '', '', '', '', '', '', '', '']
        print("발생:", sub_data)

    def header_click(self, logicalIndex):  ###사용자 행 헤더 클릭시
        global sub_row, sub_data
        sub_row = logicalIndex + 1
        print(str(sub_row) + '번째 행')

        data1 = self.tableWidget.item(logicalIndex, 0).text()
        data2 = self.tableWidget.item(logicalIndex, 1).text()
        data3 = self.tableWidget.item(logicalIndex, 2).text()
        data4 = self.tableWidget.item(logicalIndex, 3).text()
        data5 = self.tableWidget.item(logicalIndex, 4).text()
        data6 = self.tableWidget.item(logicalIndex, 5).text()
        data7 = self.tableWidget.item(logicalIndex, 6).text()
        data8 = self.tableWidget.item(logicalIndex, 7).text()
        data9 = self.tableWidget.item(logicalIndex, 8).text()
        data10 = self.tableWidget.item(logicalIndex, 9).text()
        data11 = self.tableWidget.item(logicalIndex, 10).text()  # history 인덱스 값

        sub_data = [data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11]
        print("선택된 값 ->", sub_data)

        ####텍스트에딧에 값 띄우기
        self.textEdit_3.setText(sub_data[3])  ### 기록 일자
        two = sub_data[2]
        if two == "지급":
            self.textEdit_4.setText(sub_data[4])  ###지급내용 표출
            self.textEdit_5.setText(sub_data[5])  ###인수자 표출
        elif two == "반납":
            self.textEdit_4.setText(sub_data[6])  ###반납내용 표출
            self.textEdit_5.setText(sub_data[7])  ###반납자 표출
        else:  # nore or 공백
            self.textEdit_4.setText(sub_data[4])  ###지급내용 표출
            self.textEdit_5.setText(sub_data[5])  ###인수자 표출
        self.textEdit_6.setText(sub_data[8])  ###확인자
        self.textEdit_7.setText(sub_data[9])  ###비고

        ####모델명 콤보박스 리스트 설정
        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')
        cur = conn.cursor()

        sql = "SELECT DISTINCT model_name, IF (model_name = '', '', model_name) AS result \
               FROM headset WHERE NOT model_name = '{}' ORDER BY model_name DESC ;".format(sub_data[0])
        cur.execute(sql)
        self.comboBox.clear()
        self.comboBox.addItem(sub_data[0])  ###수정창에서 선택한 데이터를 콤보박스 첫행에 추가

        ###콤보박스 리스트에 나머지 데이터 추가
        while True:
            sqlrow = cur.fetchone()
            if sqlrow == None:
                break
            self.comboBox.addItem(str(sqlrow[1]))

        self.comboBox.currentIndexChanged.connect(self.combo_change)  ###콤보박스 선택 시 함수

        ####지급여부 콤보박스2 리스트 설정             
        sql = "SELECT DISTINCT state, IF (state = '', '', state) AS result \
               FROM v_now WHERE NOT state IN ('{}','') ORDER BY state DESC; ".format(sub_data[2])
        cur.execute(sql)

        self.comboBox_2.clear()
        self.comboBox_2.addItem(sub_data[2])  ###첫행에 선택한 데이터부터 첫번째 표출

        ###콤보박스2 리스트에 나머지 데이터 추가
        while True:
            sqlrow = cur.fetchone()
            if sqlrow == None:
                break
            self.comboBox_2.addItem(str(sqlrow[1]))

        a = self.comboBox_2.currentText()  ######지급여부에 따라 나머지 텍스트 세팅

        if a == "지급":
            self.textBrowser_2.setText("{}일자".format(a))
            self.textBrowser_3.setText("{}내용".format(a))
            self.textBrowser_4.setText("인수자")
        elif a == "반납":
            self.textBrowser_2.setText("{}일자".format(a))
            self.textBrowser_3.setText("{}내용".format(a))
            self.textBrowser_4.setText("반납자")
        else:
            self.textBrowser_2.setText("일자")
            self.textBrowser_3.setText("내용")
            self.textBrowser_4.setText("인수자")

        self.comboBox_2.currentIndexChanged.connect(self.combo2_change)  ###콤보박스 선택 시 함수

        return sub_row, sub_data

    def combo_change(self):  ###모델명

        combo = self.comboBox.currentText()
        return combo

    def combo2_change(self):  ###### 지급or반납 선택할 때마다 브라우저 텍스트 세팅
        a = self.comboBox_2.currentText()

        if a == "지급":
            self.textBrowser_2.setText("{}일자".format(a))
            self.textBrowser_3.setText("{}내용".format(a))
            self.textBrowser_4.setText("인수자")
        elif a == "반납":
            self.textBrowser_2.setText("{}일자".format(a))
            self.textBrowser_3.setText("{}내용".format(a))
            self.textBrowser_4.setText("반납자")
        else:
            self.textBrowser_2.setText("일자")
            self.textBrowser_3.setText("내용")
            self.textBrowser_4.setText("인수자")

        return a

        ######수정 버튼 클릭

    def update(self):
        print("수정할게요")
        global sub_data
        standard = sub_data[1].strip()  ##일련번호 값
        if standard:  ###공백이 아닐경우

            # 사용자 입력값 받기 위한 변수, history 없뎃
            global value, h_value
            value = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            h_value = [1, 2]

            value[0] = self.combo2_change()  ###상태 콤보박스 데이터 state
            value[1] = self.textEdit_3.toPlainText()  ###state_date

            if value[0] == '지급':
                value[2] = self.textEdit_4.toPlainText()  ###give_memo
                value[3] = ''  ###return_memo
                value[4] = self.textEdit_5.toPlainText()  ###recieve_person
                value[5] = ''  ###return_person
            elif value[0] == '반납':
                value[2] = ''  ###give_memo
                value[3] = self.textEdit_4.toPlainText()  ###return_memo
                value[4] = ''  ###recieve_person
                value[5] = self.textEdit_5.toPlainText()  ###return_person
            else:  ###none or 공백
                value[0] == ''
                value[2] = self.textEdit_4.toPlainText()  ###give_memo
                value[3] = ''  ###return_memo
                value[4] = self.textEdit_5.toPlainText()  ###recieve_person
                value[5] = ''  ###return_person

            value[6] = self.textEdit_6.toPlainText()  ###check_person
            value[7] = self.textEdit_7.toPlainText()  ###bigo
            value[8] = sub_data[10]  ###이력 기록 고유 인덱스 값

            h_value[0] = self.combo_change()  ###모델명
            h_value[1] = sub_data[1]  ###일련번호

            print("{0[0]},{0[1]},{0[2]},{0[3]},{0[4]},{0[5]},{0[6]},{0[7]},{0[8]}".format(value))

            try:
                print(datetime.datetime.strptime(value[1], "%Y-%m-%d"))

                answer = self.Question_event_update()  ### yes or no

                if answer:

                    conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                           # sql테이블 읽어오기
                                           db='headset_db', charset='utf8')
                    cur = conn.cursor()
                    if sub_data[10].strip():  ## 히스토리 인덱스 공백,null아닐 경우
                        sql = "UPDATE history SET state = '{0[0]}', state_date = '{0[1]}', give_memo = '{0[2]}', return_memo='{0[3]}', recieve_person = '{0[4]}', return_person = '{0[5]}', check_person = '{0[6]}', bigo = '{0[7]}' WHERE num = {0[8]};".format(
                            value)
                    if not sub_data[10].strip():  ## 히스토리 데이터x, 인덱스 공백,null인 경우
                        print('인덱스값 없음----->"{}"'.format(value[8]))
                        sql = "INSERT INTO history VALUES (NULL,'{1[1]}','{0[0]}','{0[1]}','{0[2]}','{0[3]}','{0[4]}','{0[5]}','{0[6]}','{0[7]}');".format(
                            value, h_value)
                    try:
                        cur.execute(sql)

                        print(sql)
                        sql = "UPDATE headset SET model_name = '{0[0]}' WHERE serial_num = '{0[1]}';".format(h_value)
                        cur.execute(sql)
                        print(sql)
                        ##########수정 후 다시 표출
                        sql = "SELECT * FROM v_now WHERE serial_num = '{}' ORDER BY state_date DESC".format(sub_data[1])
                        ####테이블 행열 지정
                        cur.execute(sql)
                        allrows = cur.fetchall()
                        self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
                        self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
                        self.tableWidget.setHorizontalHeaderLabels(
                            ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이름
                        self.tableWidget.setStyleSheet("border-style:solid;"
                                                       "border-width: 1px;"
                                                       "border-color: #9DCFFF;"
                                                       "border-radius: 3px;")

                        ####테이블 데이터 표출
                        cur.execute(sql)
                        row = 0
                        while True:
                            sqlrow = cur.fetchone()
                            if sqlrow == None:
                                break
                            for col in range(0, 11):  # 0~10열 출력
                                self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                                if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                                    self.tableWidget.setItem(row, col, QTableWidgetItem(""))
                            row += 1
                        self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김

                        conn.commit()  #######DB 적용하려면 이거 필수
                        QMessageBox.about(self, '알림', '헤드셋 이력 정보가 수정되었습니다.')
                    except pymysql.err.DataError:
                        QMessageBox.warning(self, '경고', '허용 글자 수를 초과했습니다')

                if not answer: pass

            except ValueError:
                QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')

            except pymysql.err.OperationalError:
                QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')

        elif not standard:  ####선택값 공백인 경우
            QMessageBox.warning(self, '경고', '수정할 데이터를 선택하세요.')

        sub_data = ['', '', '', '', '', '', '', '', '', '', '']  ### 수정창에서 선택한 행 리셋
        print("수정창에서 선택한 값 초기화를 완료하였다,{}".format(sub_data))

        self.tableWidget.resizeColumnToContents(4)  # 4번째 열 너비 조정
        self.tableWidget.resizeColumnToContents(6)  # 6번째 열 너비 조정
        self.tableWidget.resizeColumnToContents(9)  # 9번째 열 너비 조정

    ######이력 등록 버튼 클릭       
    def insert(self):

        print("값은", send_data)
        ####사용자 입력값 받아오기
        global value, h_value
        value = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        h_value = [1, 2]

        value[0] = self.combo2_change()  ###상태 콤보박스 현재 데이터

        value[1] = self.textEdit_3.toPlainText()  ###state_date

        if value[0] == '지급':
            value[2] = self.textEdit_4.toPlainText()  ###give_memo
            value[3] = ''  ###return_memo
            value[4] = self.textEdit_5.toPlainText()  ###recieve_person
            value[5] = ''  ###return_person

        elif value[0] == '반납':
            value[2] = ''  ###give_memo
            value[3] = self.textEdit_4.toPlainText()  ###return_memo
            value[4] = ''  ###recieve_person
            value[5] = self.textEdit_5.toPlainText()  ###return_person

        else:  ###none or 공백
            value[0] == ''
            value[2] = self.textEdit_4.toPlainText()  ###give_memo
            value[3] = ''  ###return_memo
            value[4] = self.textEdit_5.toPlainText()  ###recieve_person
            value[5] = ''  ###return_person

        value[6] = self.textEdit_6.toPlainText()  ###check_person
        value[7] = self.textEdit_7.toPlainText()  ###bigo

        h_value[0] = self.combo_change()  ###모델명 콤보박스 현재 데이터
        h_value[1] = send_data  ###일련번호

        print("{0[0]},{0[1]},{0[2]},{0[3]},{0[4]},{0[5]},{0[6]},{0[7]}".format(value))

        try:
            print(datetime.datetime.strptime(value[1], "%Y-%m-%d"))

            answer = self.Question_event_insert()
            if answer:
                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()

                sql = "INSERT INTO history VALUES (NULL,'{1[1]}','{0[0]}','{0[1]}','{0[2]}','{0[3]}','{0[4]}','{0[5]}','{0[6]}','{0[7]}');".format(
                    value, h_value)
                cur.execute(sql)
                print(sql)

                ################등록 후 다시 표출

                sql = "SELECT * FROM v_now WHERE serial_num = '{}' ORDER BY state_date DESC".format(send_data)

                ####테이블 행열 지정
                cur.execute(sql)
                allrows = cur.fetchall()
                self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
                self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
                self.tableWidget.setHorizontalHeaderLabels(
                    ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이름
                self.tableWidget.setStyleSheet("border-style:solid;"
                                               "border-width: 1px;"
                                               "border-color: #9DCFFF;"
                                               "border-radius: 3px;")

                ###테이블 데이터 표출
                cur.execute(sql)
                row = 0
                while True:
                    sqlrow = cur.fetchone()
                    if sqlrow == None:
                        break
                    for col in range(0, 11):  # 0~10열 출력
                        self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                        if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                            self.tableWidget.setItem(row, col, QTableWidgetItem(""))
                    row += 1

                self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김

                conn.commit()  #######DB 적용하려면 이거 필수
                QMessageBox.about(self, '알림', '일련번호 : {} 헤드셋의 이력이 추가되었습니다.'.format(send_data))
                if not answer: pass
        except ValueError:
            QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')
        except pymysql.err.OperationalError:
            QMessageBox.warning(self, '경고', '날짜 형식은 YYYY-MM-DD로 입력해주세요.')

        self.tableWidget.resizeColumnToContents(4)  # 4번째 열 너비 조정
        self.tableWidget.resizeColumnToContents(6)  # 6번째 열 너비 조정
        self.tableWidget.resizeColumnToContents(9)  # 9번째 열 너비 조정

    #######이력 삭제 버튼 클릭
    def remove(self):
        global sub_data

        standard = sub_data[1].strip()
        if standard:  ###공백이 아닐경우
            if sub_data[10].strip():  ###히스토리 인덱스 공백이 아닐경우
                print("값은", send_data)
                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()
                sql = "DELETE FROM history WHERE num = '{}';".format(sub_data[10])  ###header_click함수 실행 시 생성
                answer = self.Question_event_remove()
                if answer:
                    cur.execute(sql)
                    print(sql)
                    ####삭제 후 다시 표출
                    sql = "SELECT * FROM v_now WHERE serial_num = '{}' ORDER BY state_date DESC".format(
                        send_data)  ###메인창에서 선택한 행의 일련번호
                    ####테이블 행열 지정
                    cur.execute(sql)
                    allrows = cur.fetchall()
                    self.tableWidget.setRowCount(len(allrows))  # 테이블 행 갯수 지정
                    self.tableWidget.setColumnCount(11)  # 테이블 열 갯수 지정
                    self.tableWidget.setHorizontalHeaderLabels(
                        ['모델명', '일련번호', '상태', '일자', '지급내용', '인수자', '반납내용', '반납자', '확인자', '비고'])  # 헤드이
                    self.tableWidget.setStyleSheet("border-style:solid;"
                                                   "border-width: 1px;"
                                                   "border-color: #9DCFFF;"
                                                   "border-radius: 3px;")

                    ###테이블 데이터 표출
                    cur.execute(sql)
                    row = 0
                    while True:
                        sqlrow = cur.fetchone()
                        if sqlrow == None:
                            break
                        for col in range(0, 11):  # 0~10열 출력
                            self.tableWidget.setItem(row, col, QTableWidgetItem(str(sqlrow[col])))
                            if str(sqlrow[col]) == "None":  # 일자 null값 공백으로 표출
                                self.tableWidget.setItem(row, col, QTableWidgetItem(""))
                        row += 1
                    self.tableWidget.setColumnHidden(10, True)  ####마지막 기록 순번 열 숨김
                    conn.commit()  #######DB 적용하려면 이거 필수
                    QMessageBox.about(self, '알림', '일련번호 : {} 헤드셋의 이력이 삭제되었습니다.'.format(send_data))

                if not answer: pass
            elif not sub_data[10].strip():
                QMessageBox.warning(self, '경고', '삭제할 이력이 없습니다.')
        elif not standard:  ####선택값 공백인 경우
            QMessageBox.warning(self, '경고', '삭제할 이력을 선택하세요.')

        sub_data = ['', '', '', '', '', '', '', '', '', '', '']  ### 수정창에서 선택한 행 리셋
        print("수정창에서 선택한 값 초기화를 완료하였다,{}".format(sub_data))
        self.tableWidget.resizeColumnToContents(4)  # 4번째 열 너비 조정
        self.tableWidget.resizeColumnToContents(6)  # 6번째 열 너비 조정
        self.tableWidget.resizeColumnToContents(9)  # 9번째 열 너비 조정

    def Question_event_insert(self):

        if value[0] == '지급':
            ment = "'모델명: {1[0]}, 지급여부: {0[0]}, \n지급일자: {0[1]}, \n지급내용: {0[2]}, \n인수자: {0[4]}, 확인자: {0[6]}, \n비고: {0[7]}' \n로 데이터를 추가하시겠습니까?".format(
                value, h_value)
        if value[0] == '반납':
            ment = "'모델명: {1[0]}, 지급여부: {0[0]}, \n반납일자: {0[1]}, \n반납내용: {0[3]}, \n반납자: {0[5]}, 확인자: {0[6]}, \n비고: {0[7]}' \n로 데이터를 추가하시겠습니까?".format(
                value, h_value)
        else:
            ment = "'모델명: {1[0]}, 지급여부: {0[0]}, \n지급일자: {0[1]}, \n지급내용: {0[2]}, \n인수자: {0[4]}, 확인자: {0[6]}, \n비고: {0[7]}' \n로 데이터를 추가하시겠습니까?".format(
                value, h_value)

        buttonReply = QMessageBox.question(self, '알림', ment, QMessageBox.Yes | QMessageBox.No)
        if buttonReply == QMessageBox.Yes:
            return True
        elif buttonReply == QMessageBox.No:
            return False

    def Question_event_update(self):

        if value[0] == '지급':
            ment = "{2}번 행을 '모델명: {1[0]}, 지급여부: {0[0]}, \n지급일자: {0[1]}, \n지급내용: {0[2]}, \n인수자: {0[4]}, 확인자: {0[6]}, \n비고: {0[7]}' \n로 수정하시겠습니까?".format(
                value, h_value, sub_row)
        if value[0] == '반납':
            ment = "{2}번 행을 '모델명: {1[0]}, 지급여부: {0[0]}, \n반납일자: {0[1]}, \n반납내용: {0[3]}, \n반납자: {0[5]}, 확인자: {0[6]}, \n비고: {0[7]}' \n로 수정하시겠습니까?".format(
                value, h_value, sub_row)
        else:
            ment = "{2}번 행을 '모델명: {1[0]}, 지급여부: {0[0]}, \n지급일자: {0[1]}, \n지급내용: {0[2]}, \n인수자: {0[5]}, 확인자: {0[6]}, \n비고: {0[7]}' \n로 수정하시겠습니까?".format(
                value, h_value, sub_row)

        buttonReply = QMessageBox.question(self, '알림', ment, QMessageBox.Yes | QMessageBox.No)
        if buttonReply == QMessageBox.Yes:
            return True
        elif buttonReply == QMessageBox.No:
            return False

    def Question_event_remove(self):

        ment = "일련번호 : {} 헤드셋의 {}번 행 이력을 삭제하시겠습니까?".format(send_data, sub_row)
        buttonReply = QMessageBox.question(self, '알림', ment, QMessageBox.Yes | QMessageBox.No)
        if buttonReply == QMessageBox.Yes:
            return True
        elif buttonReply == QMessageBox.No:
            return False

    def retranslateUi(self, UpdateUi):
        _translate = QtCore.QCoreApplication.translate
        UpdateUi.setWindowTitle(_translate("UpdateUi", "수정"))
        self.label_4.setText(_translate("UpdateUi", "확인자   "))
        self.label_5.setText(_translate("UpdateUi", "비고"))
        self.label_2.setText(_translate("UpdateUi", "수정"))
        self.label_6.setText(_translate("UpdateUi", "모델명"))
        self.label_7.setText(_translate("UpdateUi", "지급여부"))
        self.pushButton_2.setText(_translate("UpdateUi", "수정"))
        self.pushButton_3.setText(_translate("UpdateUi", "이력 등록"))
        self.pushButton_4.setText(_translate("UpdateUi", "이력 삭제"))


############################ 등록창 ################################################
class Ui_Resigster(QDialog):

    def __init__(self):  # 클래스 생성 시  자동 실행되는 함수
        super().__init__()
        self.setupUi(self)
        self.show()

    def setupUi(self, Dialog):

        self.setWindowFlag(Qt.WindowContextHelpButtonHint, False)  ### QDialog 윈도창에 물음표 제거     
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(464, 440)
        self.label_1 = QtWidgets.QLabel(Dialog)
        self.label_1.setGeometry(QtCore.QRect(140, 10, 181, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_1.setFont(font)
        self.label_1.setTextFormat(QtCore.Qt.RichText)
        self.label_1.setAlignment(QtCore.Qt.AlignCenter)
        self.label_1.setObjectName("label_1")
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(120, 140, 210, 41))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.textEdit_4 = QtWidgets.QTextEdit(self.horizontalLayoutWidget_4)
        self.textEdit_4.setObjectName("textEdit_4")
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(False)
        font.setPointSize(10)
        self.textEdit_4.setFont(font)
        self.horizontalLayout_4.addWidget(self.textEdit_4)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(50, 290, 361, 102))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 40, 152, 40))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(False)
        self.label.setFont(font)
        self.horizontalLayout.addWidget(self.label)
        self.textBrowser = QtWidgets.QTextBrowser(self.horizontalLayoutWidget)
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalLayout.addWidget(self.textBrowser)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(180, 40, 142, 40))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_3.setObjectName("label_3")
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(False)
        self.label_3.setFont(font)
        self.horizontalLayout_2.addWidget(self.label_3)
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.horizontalLayoutWidget_2)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.horizontalLayout_2.addWidget(self.textBrowser_2)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(120, 70, 60, 54))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(220, 80, 110, 41))
        self.comboBox.setObjectName("comboBox")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(226, 210, 101, 41))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_4.setStyleSheet("QPushButton"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 2px;"
                                        "border-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}""QPushButton::hover"
                                        "{"
                                        "border-style:solid;"
                                        "border-width: 1px;"
                                        "color:white;"
                                        "background-color: #9DCFFF;"
                                        "border-radius: 3px;"
                                        "}"
                                        )

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.pushButton_4.clicked.connect(Dialog.new)

        self.comboBox.addItem("HW251")
        self.comboBox.addItem("H171")
        self.comboBox.currentIndexChanged.connect(self.combo_change)

        conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,  # sql테이블 읽어오기
                               db='headset_db', charset='utf8')

        cur = conn.cursor()  # 커서 연결하기
        cur.execute("SELECT * from stock WHERE model_name = 'HW251';")
        row = cur.fetchone()

        self.textBrowser.setText(str(row[1]))

        cur.execute("SELECT * from stock WHERE model_name = 'H171';")
        row = cur.fetchone()

        self.textBrowser_2.setText(str(row[1]))

    def new(self):
        print("등록 클릭")

        ment = self.Question_event()  ### yes or no

        if ment:
            try:
                ####사용자 입력값 받아오기
                global user, h_user
                user = [1, 2, 3, 4, 5, 6, 7, 8, ]
                h_user = [1, 2]

                user[0] = ''  ###상태
                user[1] = ''  ###state_date
                user[2] = ''  ###give_memo
                user[3] = ''  ###return_memo
                user[4] = ''  ###recieve_person
                user[5] = ''  ###return_person
                user[6] = ''  ###check_person
                user[7] = ''  ###bigo

                h_user[0] = self.textEdit_4.toPlainText()  # 일련번호
                h_user[1] = self.combo_change()  ###모델명 콤보박스 현재 데이터

                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')
                cur = conn.cursor()
                ###헤드셋에 추가
                sql = "INSERT INTO headset VALUES ('{0[0]}','{0[1]}','1');".format(h_user)
                cur.execute(sql)
                print(sql)

                ###빈 이력 생성
                # sql = "INSERT INTO history VALUES (NULL,'{1[0]}','{0[0]}',NULL,'{0[2]}','{0[3]}','{0[4]}','{0[5]}','{0[6]}','{0[7]}');".format(user,h_user)
                # cur.execute(sql)
                # print(sql)

                cur.execute("UPDATE stock SET amount = amount-1 WHERE model_name = '{}';".format(h_user[1]))

                conn.commit()  #######DB 적용하려면 이거 필수

                ######재고 수량 다시 세기
                conn = pymysql.connect(host='192.168.97.205', user='headset', password='headset', port=3306,
                                       # sql테이블 읽어오기
                                       db='headset_db', charset='utf8')

                cur = conn.cursor()  # 커서 연결하기
                cur.execute("SELECT * from stock WHERE model_name = 'HW251';")
                row = cur.fetchone()
                self.textBrowser.setText(str(row[1]))

                cur.execute("SELECT * from stock WHERE model_name = 'H171';")
                row = cur.fetchone()
                self.textBrowser_2.setText(str(row[1]))

                QMessageBox.about(self, '알림', '등록 완료')

            except pymysql.err.IntegrityError:
                QMessageBox.warning(self, '경고', '중복되는 일련번호가 있습니다.')


        elif not ment:
            pass

    def Question_event(self):

        ment_1 = self.combo_change()
        ment_2 = self.textEdit_4.toPlainText()
        ment = '모델명 : {} , 일련번호 : {} 을 등록하시겠습니까?'.format(ment_1, ment_2)
        buttonReply = QMessageBox.question(self, '알림', ment, QMessageBox.Yes | QMessageBox.No)

        if buttonReply == QMessageBox.Yes:
            print('Yes clicked.')
            return True
        elif buttonReply == QMessageBox.No:
            print('No clicked.')
            return False

    def combo_change(self):  ###모델명

        combo = self.comboBox.currentText()
        return combo

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "신규 등록"))
        self.label_1.setText(_translate("Dialog", "신규 등록"))
        self.label_4.setText(_translate("Dialog", "일련번호   "))
        self.groupBox.setTitle(_translate("Dialog", "현재 재고수량"))
        self.label.setText(_translate("Dialog", "HW251"))
        self.label_3.setText(_translate("Dialog", "H171"))
        self.label_2.setText(_translate("Dialog", "모델명  "))
        self.pushButton_4.setText(_translate("Dialog", "등록"))


##### qtdesigner 자동생성x
class kinwriter(QMainWindow, Ui_MainWindow, QTableWidgetItem):

    def __init__(self):
        super().__init__()

        self.setupUi(self)
        # self.timer = QTimer(self)
        # self.timer.setSingleShot(False)
        # self.timer.setInterval(5000) # in milliseconds, so 5000 = 5 seconds
        # # self.timer.timeout.connect(self.start_Macro)
        # self.timer.start()i0nscn2kdlr2k

        # print(self.hasMouseTracking())

        self.show()


app = QApplication([])
sn = kinwriter()  # 인스턴스 생성
QApplication.processEvents()
sys.exit(app.exec_())
